"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _three = require("lib/three.js");

var THREE = _interopRequireWildcard(_three);

var _MTLLoader = require("/lib/loaders/MTLLoader.js");

var MTLLoader = _interopRequireWildcard(_MTLLoader);

var _OBJLoader = require("/lib/loaders/OBJLoader.js");

var OBJLoader = _interopRequireWildcard(_OBJLoader);

var _touchListener = require("/lib/touchListener.js");

var TouchListener = _interopRequireWildcard(_touchListener);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

THREE.MTLLoader = MTLLoader;
THREE.OBJLoader = OBJLoader;

var Main = function Main() {
    _classCallCheck(this, Main);

    var scene = new THREE.Scene();
    var camera = new THREE.PerspectiveCamera(45, innerWidth / innerHeight, 0.1, 100);
    var renderer = new THREE.WebGLRenderer({ canvas: canvas ? canvas : document.querySelector("canvas")[0] });
    renderer.setSize(innerWidth, innerHeight);
    document.body.appendChild(renderer.domElement);

    var ambientLight = new THREE.AmbientLight(0xcccccc, 0.4);
    scene.add(ambientLight);

    var pointLight = new THREE.PointLight(0xffffff, 0.8);
    camera.add(pointLight);
    scene.add(camera);

    camera.position.z = 8;

    var Cocacola = null; //global model
    var isAutoRotation = true;
    var touches = new TouchListener(renderer.domElement);
    var touchStart = { x: 0, y: 0 };
    var touchRotation = { x: 0, y: 0, z: 0 };

    var mtlLoader = new THREE.MTLLoader();
    mtlLoader.setPath('models/');
    mtlLoader.load('Cocacola.mtl', function (materials) {
        materials.preload();
        var objLoader = new THREE.OBJLoader();
        objLoader.setMaterials(materials);
        objLoader.setPath('models/');
        objLoader.load('Cocacola.obj', function (object) {
            Cocacola = object;
            scene.add(object);
        }, function (xhr) {}, function (xhr) {});
    });

    var animate = function animate() {
        requestAnimationFrame(animate);

        if (touches.list.length) {
            isAutoRotation = false;
            var current = touches.list[0];
            Cocacola.rotation.x = touchRotation.x + (current.y - touchStart.y) * 0.03;
            Cocacola.rotation.y = touchRotation.y + (current.x - touchStart.x) * 0.03;
        }

        if (Cocacola && isAutoRotation) {
            Cocacola.rotation.x += 0.01;
            Cocacola.rotation.y += 0.01;
        }

        renderer.render(scene, camera);
    };
    animate();

    canvas.addEventListener("touchstart", function (evt) {
        var p = evt.changedTouches[0];
        touchStart.x = p.clientX;
        touchStart.y = p.clientY;
        if (Cocacola) {
            touchRotation.x = Cocacola.rotation.x;
            touchRotation.y = Cocacola.rotation.y;
            touchRotation.z = Cocacola.rotation.z;
        }
    });
};

exports.default = Main;